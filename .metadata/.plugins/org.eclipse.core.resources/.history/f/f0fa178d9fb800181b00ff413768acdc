package org.transport420.sgmv.dao.repositorio;

import java.sql.CallableStatement;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.time.LocalDate;
import java.time.format.DateTimeFormatter;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.List;
import java.util.TimeZone;

import org.transport420.sgmv.dao.interfaces.ICostoMantenimientoRepositorio;
import org.transport420.sgmv.daofactory.MySqlDAOFactory;
import org.transport420.sgmv.model.Actividad;
import org.transport420.sgmv.model.CostoMantenimiento;
import org.transport420.sgmv.model.CostoMantenimientoDetalle;
import org.transport420.sgmv.model.Defecto;
import org.transport420.sgmv.model.Empleado;
import org.transport420.sgmv.model.Equipo;
import org.transport420.sgmv.model.OrdenMantenimiento;
import org.transport420.sgmv.model.ReporteFalla;
import org.transport420.sgmv.resources.beans.CostosMantenimientoFilterBean;

public class CostoMantenimientoRepositorio implements ICostoMantenimientoRepositorio {

	@Override
	public List<CostoMantenimiento> listarCostosMantenimiento(CostosMantenimientoFilterBean filterBean)
			throws Exception {
		Connection con = null;
		List<CostoMantenimiento> costosMantenimiento = new ArrayList<>();
		try {
			con = MySqlDAOFactory.obtenerConexion();
			String query = "{CALL sgmv.sp_listar_costos_mantenimiento(?)}";
			CallableStatement stmt = con.prepareCall(query);
			stmt.setInt("pIdsmgv_vehiculo", filterBean.getVehiculo());
			stmt.execute();

			ResultSet rs = stmt.getResultSet();
			while (rs.next()) {
				CostoMantenimiento costoMantenimiento = new CostoMantenimiento();
				costoMantenimiento.setIdsgmv_costo_mantenimiento(rs.getInt("idsgmv_costo_mantenimiento"));
				costoMantenimiento.setCod_costo_mantenimiento(rs.getString("cod_costo_mantenimiento"));
				costoMantenimiento.setOrdenMantenimiento(new OrdenMantenimiento());
				costoMantenimiento.getOrdenMantenimiento().setIdsgmv_orden_mantenimiento(rs.getInt("idsgmv_orden_mantenimiento"));
				costoMantenimiento.getOrdenMantenimiento().setCod_mantenimiento_orden(rs.getString("cod_mantenimiento_orden"));
				costoMantenimiento.setCosto_total(rs.getFloat("costo_total"));
				DateFormat df = new SimpleDateFormat("dd/MM/yyyy");
				Calendar gmt = Calendar.getInstance(TimeZone.getTimeZone("GMT-5:00"));
				costoMantenimiento.setFecha(df.format(rs.getDate("fecha", gmt)));
				costosMantenimiento.add(costoMantenimiento);
			}
			rs.close();
		} catch (Exception e) {
			System.out.println(e.getMessage());
			return null;
		} finally {
			if (con != null) {
				con.close();
			}
		}
		return costosMantenimiento;
	}

	@Override
	public CostoMantenimiento crearCostoMantenimiento(CostoMantenimiento costoMantenimiento) throws Exception {
		Connection con = null;
		try {
			con = MySqlDAOFactory.obtenerConexion();
			con.setAutoCommit(false);
			String queryCostoMantenimiento = "{CALL sgmv.sp_crear_costo_mantenimiento(?, ?, ?, ?)}";
			String queryDetalle = "{CALL sgmv.sp_crear_costo_mantenimiento_detalle(?, ?, ?, ?, ?)}";

			CallableStatement stmt = con.prepareCall(queryCostoMantenimiento);
			stmt.setInt("pIdsgmv_orden_mantenimiento", costoMantenimiento.getOrdenMantenimiento().getIdsgmv_orden_mantenimiento());
			stmt.setFloat("pCostoTotal", costoMantenimiento.getCosto_total());
			DateTimeFormatter formatter = DateTimeFormatter.ofPattern("d/M/yyyy");
			LocalDate date = LocalDate.parse(costoMantenimiento.getFecha(), formatter);
			java.sql.Date sqlDate = java.sql.Date.valueOf(date);
			stmt.setDate("pFecha", sqlDate);
			stmt.registerOutParameter("oIdsgmv_costo_mantenimiento", java.sql.Types.INTEGER);
			stmt.execute();
			costoMantenimiento.setIdsgmv_costo_mantenimiento(stmt.getInt("oIdsgmv_costo_mantenimiento"));

			for (int i = 0; i < costoMantenimiento.getDetalle().size(); i++) {
				CostoMantenimientoDetalle det = costoMantenimiento.getDetalle().get(i);
				if (det != null) {
					CallableStatement stmtDetalle = con.prepareCall(queryDetalle);
					stmtDetalle.setInt("pIdsgmv_costo_mantenimiento",
							costoMantenimiento.getIdsgmv_costo_mantenimiento());
					stmtDetalle.setInt("pIdsgmv_vehiculo", det.getVehiculo().getIdsgmv_vehiculo());
					stmtDetalle.setString("pActividad", det.getActividad());
					stmtActividad.setString("pEjecutadoPor", act.getEjecutado_por());
					LocalDate dateProg = LocalDate.parse(act.getFecha_programacion(), formatter);
					java.sql.Date sqlDateProg = java.sql.Date.valueOf(dateProg);
					stmtActividad.setDate("pFechaProgramacion", sqlDateProg);
					LocalDate dateEjec = LocalDate.parse(act.getFecha_ejecucion(), formatter);
					java.sql.Date sqlDateEjec = java.sql.Date.valueOf(dateEjec);
					stmtActividad.setDate("pFechaEjecucion", sqlDateEjec);
					stmtActividad.registerOutParameter("oIdsgmv_actividad", java.sql.Types.INTEGER);
					stmtActividad.execute();
				}
			}

			for (int i = 0; i < ordenMantenimiento.getDefectos().size(); i++) {
				Defecto def = ordenMantenimiento.getDefectos().get(i);
				if (def != null) {
					CallableStatement stmtDefecto = con.prepareCall(queryDefectos);
					stmtDefecto.setInt("pIdsgmv_orden_mantenimiento",
							ordenMantenimiento.getIdsgmv_orden_mantenimiento());
					stmtDefecto.setString("pDescripcion", def.getDescripcion());
					stmtDefecto.setString("pReportadoVerPor", def.getReportado_ver_por());
					LocalDate dateRept = LocalDate.parse(def.getFecha_reporte(), formatter);
					java.sql.Date sqlDateRept = java.sql.Date.valueOf(dateRept);
					stmtDefecto.setDate("pFechaReporte", sqlDateRept);
					LocalDate dateInsp = LocalDate.parse(def.getFecha_inspeccion(), formatter);
					java.sql.Date sqlDateInsp = java.sql.Date.valueOf(dateInsp);
					stmtDefecto.setDate("pFechaInspeccion", sqlDateInsp);
					stmtDefecto.registerOutParameter("oIdsgmv_defecto", java.sql.Types.INTEGER);
					stmtDefecto.execute();
				}
			}

			for (int i = 0; i < ordenMantenimiento.getEquipos().size(); i++) {
				Equipo eqp = ordenMantenimiento.getEquipos().get(i);
				if (eqp != null) {
					CallableStatement stmtEquipo = con.prepareCall(queryEquipos);
					stmtEquipo.setInt("pIdsgmv_orden_mantenimiento",
							ordenMantenimiento.getIdsgmv_orden_mantenimiento());
					stmtEquipo.setString("pDescripcion", eqp.getDescripcion());
					stmtEquipo.setString("pInspeccionadoPor", eqp.getInspeccionado_por());
					stmtEquipo.setInt("pOk", eqp.getOk());
					stmtEquipo.registerOutParameter("oIdsgmv_equipo", java.sql.Types.INTEGER);
					stmtEquipo.execute();
				}
			}

			con.commit();
		} catch (Exception e) {
			try {
				if (con != null)
					con.rollback();
			} catch (SQLException sqlE) {
				System.out.println(sqlE.getMessage());
			}
			System.out.println(e.getMessage());
			return null;
		} finally {
			if (con != null) {
				con.close();
			}
		}
		return ordenMantenimiento;
	}

	@Override
	public CostoMantenimiento obtenerCostoMantenimiento(int idsgmv_costo_mantenimiento) throws Exception {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public CostoMantenimiento editarCostoMantenimiento(CostoMantenimiento costoMantenimiento) throws Exception {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public void eliminarCostoMantenimiento(int idsgmv_costo_mantenimiento) throws Exception {
		// TODO Auto-generated method stub
		
	}

}
