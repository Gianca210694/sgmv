package org.transport420.sgmv.servicio;

import java.io.File;
import java.util.List;

import org.transport420.sgmv.dao.interfaces.IVehiculoRepositorio;
import org.transport420.sgmv.daofactory.DAOFactory;
import org.transport420.sgmv.model.Vehiculo;
import org.transport420.sgmv.resources.beans.VehiculosFilterBean;

import jxl.Cell;
import jxl.CellView;
import jxl.Workbook;
import jxl.WorkbookSettings;
import jxl.write.Label;
import jxl.write.WritableCellFormat;
import jxl.write.WritableFont;
import jxl.write.WritableSheet;
import jxl.write.WritableWorkbook;

public class VehiculoServicio {

	IVehiculoRepositorio vehiculoRepositorio = DAOFactory.getDAOFactory(DAOFactory.MYSQL).getVehiculo();

	public List<Vehiculo> listarVehiculos(VehiculosFilterBean filterBean) {
		try {
			return vehiculoRepositorio.listarVehiculos(filterBean);
		} catch (Exception e) {
			return null;
		}
	}

	public Vehiculo crearVehiculo(Vehiculo vehiculo) {
		try {
			return vehiculoRepositorio.crearVehiculo(vehiculo);
		} catch (Exception e) {
			return null;
		}
	}

	public Vehiculo obtenerVehiculo(int idsgmv_vehiculo) {
		try {
			return vehiculoRepositorio.obtenerVehiculo(idsgmv_vehiculo);
		} catch (Exception e) {
			return null;
		}
	}

	public Vehiculo editarVehiculo(Vehiculo vehiculo) {
		try {
			return vehiculoRepositorio.editarVehiculo(vehiculo);
		} catch (Exception e) {
			return null;
		}
	}

	public void eliminarVehiculo(int idsgmv_vehiculo) {
		try {
			vehiculoRepositorio.eliminarVehiculo(idsgmv_vehiculo);
		} catch (Exception e) {
			System.out.println(e.getMessage());
		}
	}

	public byte[] exportarVehiculo(VehiculosFilterBean filterBean, String ruta) {
		WorkbookSettings conf = new WorkbookSettings();
		conf.setEncoding("ISO-8859-1");
		try {
			WritableWorkbook workBoook = Workbook.createWorkbook(new File(ruta), conf);
			WritableSheet sheet = workBoook.createSheet("Resultado", 0);
			WritableFont h = new WritableFont(WritableFont.ARIAL, 11, WritableFont.NO_BOLD);
			WritableCellFormat hFormat = new WritableCellFormat(h);
			List<Vehiculo> vehiculos = vehiculoRepositorio.listarVehiculos(filterBean);
			int filaCount = 0;
		
			sheet.addCell(new Label(0, filaCount, "PLACA", hFormat));
			sheet.addCell(new Label(1, filaCount, "MARCA", hFormat));
			sheet.addCell(new Label(2, filaCount, "MODELO", hFormat));
			sheet.addCell(new Label(3, filaCount, "CLASE", hFormat));
			sheet.addCell(new Label(4, filaCount, "CONSTANCIA", hFormat));
			sheet.addCell(new Label(5, filaCount, "CATEGORIA", hFormat));
			sheet.addCell(new Label(6, filaCount, "SERIE CHASIS", hFormat));
			sheet.addCell(new Label(7, filaCount, "AÑOS FABRICACIÓN", hFormat));
			sheet.addCell(new Label(8, filaCount, "N° EJES", hFormat));
			sheet.addCell(new Label(9, filaCount, "CARGA ÚTIL", hFormat));
			sheet.addCell(new Label(10, filaCount, "PESO SECO", hFormat));
			sheet.addCell(new Label(11, filaCount, "KM", hFormat));
			sheet.addCell(new Label(12, filaCount, "ESTADO", hFormat));
			filaCount++;
			for (Vehiculo vehiculo : vehiculos) {
				sheet.addCell(new Label(0, filaCount, vehiculo.getPlaca(), hFormat));
				sheet.addCell(new Label(1, filaCount, vehiculo.getMarca(), hFormat));
				sheet.addCell(new Label(2, filaCount, vehiculo.getModelo(), hFormat));
				sheet.addCell(new Label(3, filaCount, vehiculo.getClase(), hFormat));
				sheet.addCell(new Label(4, filaCount, vehiculo.getConstancia(), hFormat));
				sheet.addCell(new Label(5, filaCount, vehiculo.getCategoria(), hFormat));
				sheet.addCell(new Label(6, filaCount, vehiculo.getSerie_chasis(), hFormat));
				sheet.addCell(new Label(7, filaCount, "" + vehiculo.getAnio_produccion(), hFormat));
				sheet.addCell(new Label(8, filaCount, "" + vehiculo.getNumero_ejes(), hFormat));
				sheet.addCell(new Label(9, filaCount, "" + vehiculo.getCarga_util(), hFormat));
				sheet.addCell(new Label(10, filaCount, "" + vehiculo.getPeso_neto(), hFormat));
				sheet.addCell(new Label(11, filaCount, "" + vehiculo.getKilometraje_total(), hFormat));
				sheet.addCell(new Label(12, filaCount, "" + vehiculo.getEstado(), hFormat));
				filaCount++;
			}
			for(int x=0;x<13;x++)
			{
			    CellView cell = sheet.getColumnView(x);
			    cell.setAutosize(true);
			    sheet.setColumnView(x, cell);
			}
			sheetAutoFitColumns(sheet);
			workBoook.write();
			workBoook.close();
		} catch (Exception e) {
			System.out.println(e.getMessage());
			e.printStackTrace();
		}
		return null;
	}
	

	private void sheetAutoFitColumns(WritableSheet sheet) {
	    for (int i = 0; i < sheet.getColumns(); i++) {
	        Cell[] cells = sheet.getColumn(i);
	        int longestStrLen = -1;
	
	        if (cells.length == 0)
	            continue;
	
	        /* Find the widest cell in the column. */
	        for (int j = 0; j < cells.length; j++) {
	            if ( cells[j].getContents().length() > longestStrLen ) {
	                String str = cells[j].getContents();
	                if (str == null || str.isEmpty())
	                    continue;
	                longestStrLen = str.trim().length();
	            }
	        }
	
	        /* If not found, skip the column. */
	        if (longestStrLen == -1) 
	            continue;
	
	        /* If wider than the max width, crop width */
	        if (longestStrLen > 255)
	            longestStrLen = 255;
	
	        CellView cv = sheet.getColumnView(i);
	        cv.setSize(longestStrLen * 256 + 100); /* Every character is 256 units wide, so scale it. */
	        sheet.setColumnView(i, cv);
	    }
	}

}
